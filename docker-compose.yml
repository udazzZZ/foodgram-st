volumes:
    pg_data:
    static_build:
    static:

services:
    frontend:
        build:
            context: frontend
            dockerfile: Dockerfile
        volumes:
            - static_build:/static_build

    nginx:
        container_name: foodgram-proxy
        image: nginx:1.25.4-alpine
        ports:
            - "8000:8000"
        volumes:
            - static_build:/usr/share/nginx/html:ro
            - ./infra/nginx.conf:/etc/nginx/conf.d/default.conf
            - static:/app/static
            - ./backend/media:/var/html/media
        depends_on:
            - backend
        networks:
            - backend-network

    db:
        image: postgres:14.7
        env_file:
            - infra/.env
        volumes:
            - pg_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 10
        networks:
            - backend-network

    backend:
        container_name: foodgram-backend
        build:
            context: backend
            dockerfile: Dockerfile
        env_file:
            - infra/.env
        volumes:
            - ./backend:/app
            - static:/app/static
            - ./backend/media:/app/media
        depends_on:
            db:
                condition: service_healthy
        command: >
            sh -c "
                while ! nc -z db 5432; do sleep 2; echo 'Waiting for PostgreSQL...'; done &&
                python manage.py migrate &&
                python manage.py collectstatic --no-input &&
                (gunicorn --bind 0.0.0.0:8000 backend.wsgi:application & daphne -b 0.0.0.0 -p 8001 backend.asgi:application)
            "
        networks:
            - backend-network

networks:
    backend-network:
        driver: bridge
        name: backend-network
